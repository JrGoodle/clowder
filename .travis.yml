language: c

os:
  - linux
  - osx

sudo: required
dist: trusty

env:
  global:
    - PYTHONPATH="$PYTHONPATH:$TRAVIS_BUILD_DIR/clowder:$TRAVIS_BUILD_DIR/clowder_test:$TRAVIS_BUILD_DIR/test"
  matrix:
    - TARGET="cats" PYVERSION="python3"

matrix:
  include:
  - os: linux
    env: TARGET="cats" PYVERSION="python2"
  - os: linux
    env: TARGET="cocos2d" PYVERSION="python3"
  - os: linux
    env: TARGET="llvm" PYVERSION="python3"
  - os: linux
    env: TARGET="parallel" PYVERSION="python2"
  - os: linux
    env: TARGET="parallel" PYVERSION="python3"
  - os: linux
    env: TARGET="swift" PYVERSION="python3"

before_install: script/bootstrap "$PYVERSION"

install:
    - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install github-release; fi
    - if [ "$TRAVIS_OS_NAME" = "osx" ]; then sudo -H pip3 install twine wheel; fi

before_script:
    - script/setup "$PYVERSION"
    - script/test

script:
    - if [ "$TARGET" = "cats" ]; then clowder-test --coverage cats all; fi
    - if [ "$TARGET" = "cocos2d" ]; then clowder-test cocos2d all; fi
    - if [ "$TARGET" = "llvm" ]; then clowder-test llvm all; fi
    - if [ "$TARGET" = "parallel" ]; then clowder-test parallel; fi
    - if [ "$TARGET" = "swift" ]; then clowder-test swift all; fi

after_script:
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then coverage combine examples/cats; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then coverage xml; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then ./cc-test-reporter after-build --exit-code $TRAVIS_TEST_RESULT; fi

after_success: if [ "$TRAVIS_OS_NAME" = "osx" ]; then script/deploy; fi

branches:
  only: # whitelist
    - master

notifications:
  email: false
  slack:
    secure: G5UcsKT8xMjddtTSUPXECI3uobS5/sRn87iC+fMilbpnDK3yAGoKkyCfPK4E/kJSEPZ8hBKz3uHNzpb0DdOSsjbAItiI+RQ3Glgs86B1sg2pqB2uwVPDCyPn8XHnpYPkKxFYlG19/JG9SEDej4N3kjnB4FVBm7n38ZFWjZh7s2fOjlpPKiHz8pe3B8XYfXTyQGIr9Q2I1eHbQJOEzs4PO1j/uKC1jgwe7nZnOE3sYsfcabScEHTz4Z7s9xhRXcwvorhQYQtBS7id9Gg5E4ANhoVVs7QifazDE1EK3vWjvoFYgYKnCbXzQunB09XlymrWTJZx80JOmgALU0UPUEI8Wvt/kXQP9oxqsMEeoP7UbZvXTfmeOVlm+5f5oesp/JQeBvaPj5qnbWVzcMGqi/hev4qwNv01jQOWrzVmZazw+HgeQcuaHKprK7KLdPFQR5c6CJJtwIxwdRGLmHVTtKIVQo45mEEnjHpYOmbkmmN2VETdgRlkV8t0WdCQpXXVH7uniwa7cYzb9shpiq0o+G3uHN1eUIuia/0XIVgWRL0baN6JitEBvc032M/3UrJESStQFpMF/Nw+NXm38xp7sQWReZM1ZVIBNIR1XPnaZxuLzBhKKCYcByYz7PEF71o/SkWHhAa3EKPO+9q4zceTbWunjRlp1ycUIMyhqDlCpHM8c2Y=

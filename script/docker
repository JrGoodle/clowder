#!/usr/bin/env python

import os
import shutil
import subprocess
import sys
from pathlib import Path
from subprocess import CompletedProcess


def run_command(cwd: Path, cmd: str) -> CompletedProcess:
    cmd_env = os.environ.copy()
    completed_process = subprocess.run(cmd, cwd=cwd, shell=True, env=cmd_env)
    return completed_process


def start_docker() -> None:
    build_ssh_dir = path / "build" / "ssh"
    shutil.rmtree(build_ssh_dir, ignore_errors=True)
    home_ssh_dir = Path.home() / ".ssh"
    shutil.copytree(str(home_ssh_dir), str(build_ssh_dir))

    # Fix paths for Circle CI
    config_file = build_ssh_dir / "config"
    if config_file.exists():
        config_contents = config_file.read_text().replace("/home/circleci", "/root")
        config_file.unlink()
        with open(config_file, 'w') as f:
            f.write(config_contents)

    result = run_command(path, "docker-compose up --build -d")
    assert result.returncode == 0
    result = run_command(path, "docker-compose exec clowder pip install --requirement requirements.txt")
    assert result.returncode == 0
    result = run_command(path, "docker-compose exec clowder pip install --editable .")
    assert result.returncode == 0

    shutil.rmtree(build_ssh_dir, ignore_errors=True)


def stop_docker() -> None:
    result = run_command(path, "docker-compose rm --force --stop clowder")
    assert result.returncode == 0


command_arg = ""
if len(sys.argv) == 2:
    command_arg = sys.argv[1]
else:
    print("Wrong number of arguments")
    exit(1)

# Repo path
path = Path(__file__).resolve().parent.parent.resolve()

if command_arg == "start":
    start_docker()
elif command_arg == "stop":
    stop_docker()
else:
    print("Unknown argument")
    exit(1)

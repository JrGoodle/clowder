#!/usr/bin/env python

import os
import shutil
import subprocess
import sys
from pathlib import Path
from subprocess import CompletedProcess

repo_path = Path(__file__).resolve().parent.parent.resolve()


def run_command(cmd: str, cwd: Path = repo_path, check: bool = True) -> CompletedProcess:
    cmd_env = os.environ.copy()
    completed_process = subprocess.run(cmd, cwd=cwd, shell=True, env=cmd_env)
    if check:
        assert completed_process.returncode == 0
    return completed_process


def start_docker() -> None:
    build_ssh_dir = repo_path / "build" / "ssh"
    shutil.rmtree(build_ssh_dir, ignore_errors=True)
    home_ssh_dir = Path.home() / ".ssh"
    shutil.copytree(str(home_ssh_dir), str(build_ssh_dir))

    # Fix paths for Circle CI
    config_file = build_ssh_dir / "config"
    if config_file.exists():
        config_contents = config_file.read_text().replace("/home/circleci", "/root")
        config_file.unlink()
        with config_file.open('w') as f:
            f.write(config_contents)

    run_command("docker-compose up --build -d")
    run_command("docker-compose exec clowder pipenv install --dev -e .")

    shutil.rmtree(build_ssh_dir, ignore_errors=True)


def stop_docker() -> None:
    run_command("docker-compose rm --force --stop clowder")


def main() -> None:
    try:
        if len(sys.argv) == 2:
            command_arg = sys.argv[1]
        else:
            raise Exception("Wrong number of arguments")

        if command_arg == "start":
            start_docker()
        elif command_arg == "stop":
            stop_docker()
        else:
            raise Exception("Unknown argument")
    except Exception as err:
        print(err)
        exit(1)


if __name__ == '__main__':
    main()

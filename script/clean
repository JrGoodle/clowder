#!/usr/bin/env python

from pathlib import Path
from subprocess import CompletedProcess

import pygoodle.command as cmd
import pygoodle.filesystem as fs
from pygoodle.app import App, BoolArgument
from pygoodle.console import CONSOLE
from pygoodle.format import Format

repo_path: Path = Path(__file__).resolve().parent.parent.resolve()
build_dir: Path = repo_path / "build"
temp_dir: Path = repo_path / "temp"
dist_dir: Path = repo_path / "dist"
clowder_repo_egg_dir: Path = repo_path / "clowder_repo.egg-info"
clowder_dir: Path = repo_path / "clowder"
pycache = "__pycache__"
pytest_cache: Path = repo_path / '.pytest_cache'


def rm_dir(dir_path: Path) -> None:
    CONSOLE.stdout(Format.h3(f"Remove {dir_path.relative_to(repo_path)}"))
    fs.remove_dir(repo_path, ignore_errors=True)


def run_command(command: str) -> CompletedProcess:
    return cmd.run_command(command, cwd=repo_path, print_command=True)


def clean_build() -> None:
    CONSOLE.stdout(Format.h2('Clean build files'))
    rm_dir(dist_dir)
    rm_dir(build_dir)
    rm_dir(temp_dir)


def clean_all() -> None:
    CONSOLE.stdout(Format.h1('Clean all files'))
    rm_dir(clowder_repo_egg_dir)
    # run_command(path, "pipenv --rm")
    run_command("pip uninstall --yes clowder-repo")
    rm_dir(clowder_repo_egg_dir)
    rm_dir(pytest_cache)
    dirs = [d for d in fs.list_subdirectories(repo_path, recursive=True) if d.name == pycache]
    for directory in dirs:
        rm_dir(directory)
    clean_build()


class CleanApp(App):
    class Meta:
        name = 'clean'
        arguments = [
            BoolArgument('--build', '-b', help='clean build files')
        ]

    def run(self, _) -> None:
        if self.parsed_args.args.build:
            clean_build()
        else:
            clean_all()


if __name__ == '__main__':
    CleanApp().main()

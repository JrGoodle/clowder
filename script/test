#!/usr/bin/env python

import argparse
import os
import random
import string
import subprocess
from pathlib import Path
from subprocess import CompletedProcess
from typing import List, Tuple

Parser = Union[argparse.ArgumentParser, argparse._MutuallyExclusiveGroup, argparse._ArgumentGroup]  # noqa
Arguments = List[Tuple[list, dict]]

# Repo path
path = Path(__file__).resolve().parent.parent.resolve()

# Create build dirs
build_dir = path / "build"
build_dir.mkdir(parents=True, exist_ok=True)
coverage_dir = build_dir / "coverage"
coverage_dir.mkdir(parents=True, exist_ok=True)
temp_dir = path / "temp"
temp_dir.mkdir(parents=True, exist_ok=True)


def run_command(cwd: Path, cmd: str) -> CompletedProcess:
    cmd_env = os.environ.copy()
    completed_process = subprocess.run(cmd, cwd=cwd, shell=True, env=cmd_env)
    return completed_process


def get_random_alphanumeric_string(length: int) -> str:
    letters_and_digits = string.ascii_letters + string.digits
    result_str = ''.join((random.choice(letters_and_digits) for _ in range(length)))
    print(f"Random alphanumeric String is: {result_str}")
    return result_str


def report() -> None:
    # Coverage reports
    result = run_command(path, "coverage combine build/coverage/")
    assert result.returncode == 0
    result = run_command(path, "coverage report xml -o build/coverage/xml")
    assert result.returncode == 0
    result = run_command(path, "coverage report html --directory build/coverage/html")
    assert result.returncode == 0
    result = run_command(path, "coverage report json -o build/coverage/json")
    assert result.returncode == 0
    exit()


def test(label: str, options: str) -> None:
    # Base command
    command = f"pytest --basetemp={temp_dir} -vv"
    # Coverage command
    command += " --cov-config=.coveragerc --cov-append --cov=clowder"
    # Test group
    command += " --test-group-count 10 --test-group=2"
    # Add extra arguments
    command += options

    # JUnit reports
    junit_dir = build_dir / f"junit"
    junit_dir.mkdir(parents=True, exist_ok=True)
    junit_file = junit_dir / f"results-{label}.xml"
    command += f" --junitxml={junit_file}"

    # BDD reports
    cucumber_dir = build_dir / f"cucumber"
    cucumber_dir.mkdir(parents=True, exist_ok=True)
    cucumber_file = cucumber_dir / f"results-{label}.json"
    bdd_reporting_options = f" --cucumberjson={cucumber_file} --cucumberjson-expanded"
    command += bdd_reporting_options

    # Run command
    test_cmd = f'{command} {options}'
    result = run_command(path, test_cmd)

    # Rename test reports
    junit_file.rename(f"results.{label}.xml")
    cucumber_file.rename(f"cucumber.{label}.json")

    # Rename coverage
    old_coverage_file = coverage_dir / ".coverage"
    new_coverage_file = coverage_dir / f".coverage.{label}"
    old_coverage_file.rename(new_coverage_file)

    exit(result.returncode)


def add_parser_arguments(parser: Parser, arguments: Arguments) -> None:
    for argument in arguments:
        parser.add_argument(*argument[0], **argument[1])


def main() -> None:
    try:
        parser = argparse.ArgumentParser()
        arguments = [
            (['--groups'], dict(metavar='<n>', nargs=1, default=None, type=int,
                                help='number of groups to split tests into')),
            (['--group', "-g"], dict(metavar='<n>', nargs=1, default=None, type=int,
                                     help='number of groups to split tests into')),
            (['--label', '-l'], dict(nargs=1, metavar='<label>', default=get_random_alphanumeric_string(12),
                                     help='label to append to results')),
            (['--parallel', '-p'], dict(action='store_true', help='run tests in parallel'))
        ]
        add_parser_arguments(parser, arguments)

        group = parser.add_mutually_exclusive_group(required=True)
        mutually_exclusive_arguments = [
            (['--report', '-r'], dict(action='store_true', help='generate test reports')),
            (['--modules', '-m'], dict(nargs=1, metavar='<modules>', help='test modules to run'))
        ]
        add_parser_arguments(group, mutually_exclusive_arguments)
        args = parser.parse_args()

        if args.report:
            report()
            exit()

        options = f" -m '{args.modules}'"
        if args.parallel:
            options += " -n auto"
        if args.groups or args.group:
            options += f" --test-group-count {args.groups} --test-group={args.group}"

        test(args.label, options)
    except Exception as err:
        print(err)
        exit(1)


if __name__ == '__main__':
    main()

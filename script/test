#!/usr/bin/env python

import os
import shutil
import subprocess
import sys
from pathlib import Path
from subprocess import CompletedProcess
from typing import Optional


def run_command(cwd: Path, command: str) -> CompletedProcess:
    cmd_env = os.environ.copy()
    result = subprocess.run(command, cwd=cwd, shell=True, env=cmd_env)
    return result


command_arg: Optional[str] = None
if len(sys.argv) > 1:
    command_arg = sys.argv[1]

# Repo path
path = Path(__file__).resolve().parent.parent.resolve()

# Clean old test coverage results
run_command(path, "coverage erase")

# Create build dir
build_dir = path / "build"
reports_dir = build_dir / "reports"
reports_dir.mkdir(parents=True, exist_ok=True)

# Base command
temp_dir = build_dir / "temp"
temp_dir.mkdir(parents=True, exist_ok=True)
base_command = f"pytest --cov-config=.coveragerc --basetemp={temp_dir} --cov-append --cov=clowder -vv"

# Coverage Reporting
coverage_dir = reports_dir / "coverage"
coverage_dir.mkdir(parents=True, exist_ok=True)
html_dir = coverage_dir / "html"
xml_file = coverage_dir / "cov.xml"
annotate_dir = coverage_dir / "annotate"
coverage_reporting_options = f" --cov-report html:{html_dir} " \
                             f"--cov-report xml:{xml_file} " \
                             f"--cov-report annotate:{annotate_dir}"
base_command += coverage_reporting_options

# BDD Reporting
functional_dir = reports_dir / "functional"
functional_dir.mkdir(parents=True, exist_ok=True)
cucumber_file = functional_dir / "cucumber.json"
bdd_reporting_options = f" --cucumberjson={cucumber_file} --cucumberjson-expanded"
base_command += bdd_reporting_options

if command_arg is not None:
    test_cmd = f'{base_command} {command_arg}'
    result = run_command(path, test_cmd)
    exit(result.returncode)

# Run tests
test_cmd = f'{base_command} -n auto -m "status and not config and not offline and not write"'
run_command(path, test_cmd)

# # parallel
# test_cmd = f'{base_command} -n auto -m "not config and not offline and not write"'
# run_command(path, test_cmd)
# # offline
# test_cmd = f'{base_command} -m "offline and not config"'
# run_command(path, test_cmd)
# # write
# test_cmd = f'{base_command} -m "write and not config"'
# run_command(path, test_cmd)
# # config
# test_cmd = f'{base_command} -m "config"'
# run_command(path, test_cmd)

# config_file = Path.home() / ".config/clowder/clowder.config.yml"
# config_file.unlink()

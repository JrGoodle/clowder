#!/usr/bin/env python

from pathlib import Path
from subprocess import CompletedProcess
from typing import Optional

import pygoodle.filesystem as fs
import pygoodle.command as cmd
from pygoodle.app import App, Argument, BoolArgument, CountArgument


repo_path: Path = Path(__file__).resolve().parent.parent.resolve()
build_dir: Path = fs.make_dir(repo_path / "build")
temp_dir: Path = fs.make_dir(repo_path / "temp")
coverage_dir: Path = fs.make_dir(build_dir / "coverage")
junit_dir: Path = fs.make_dir(build_dir / f"junit")
cucumber_dir: Path = fs.make_dir(build_dir / f"cucumber")


def run_command(command: str) -> CompletedProcess:
    command = f'. script/import.sh && {command}'
    return cmd.run_command(command, cwd=repo_path, executable='bin/bash')


def report_coverage() -> None:
    run_command(f"coverage combine")
    xml_file = coverage_dir / "coverage.xml"
    run_command(f"coverage xml -o {xml_file}")
    html_dir = coverage_dir / "html"
    run_command(f"coverage html --directory {html_dir}")
    json_file = coverage_dir / "coverage.json"
    run_command(f"coverage json -o {json_file}")
    annotate_dir = coverage_dir / "annotate"
    run_command(f"coverage annotate --directory {annotate_dir}")
    exit()


def test(command_options: str, label: Optional[str] = None) -> None:
    file_label = "" if label is None else f".{label}"

    # Base command
    command = f"pipenv run pytest --basetemp={temp_dir} -vv"

    # Add extra arguments
    command += command_options

    # Coverage command
    command += " --cov-config=.coveragerc --cov-append --cov=clowder"

    # Coverage reports
    xml_file = coverage_dir / f"coverage{file_label}.xml"
    command += f" --cov-report xml:{xml_file}"
    html_dir = coverage_dir / f"html{file_label}"
    command += f" --cov-report html:{html_dir}"
    annotate_dir = coverage_dir / f"annotate{file_label}"
    command += f" --cov-report annotate:{annotate_dir}"

    # JUnit reports
    junit_file = junit_dir / f"results{file_label}.xml"
    command += f" --junitxml={junit_file}"

    # BDD reports
    cucumber_file = cucumber_dir / f"results{file_label}.json"
    bdd_reporting_options = f" --cucumberjson={cucumber_file} --cucumberjson-expanded"
    command += bdd_reporting_options

    # Run test command
    result = run_command(command)

    # Rename coverage
    if file_label:
        old_coverage_file = coverage_dir / ".coverage"
        new_coverage_file = coverage_dir / f".coverage{file_label}"
        old_coverage_file.rename(new_coverage_file)

    if result.returncode != 0:
        exit(result.returncode)


class TestApp(App):
    class Meta:
        name = 'test'
        arguments = [
            CountArgument('--groups', help='number of groups to split tests into'),
            CountArgument('--group', "-g", help='group number to run tests for'),
            Argument('--label', '-l', nargs=1, default=None, help='label to append to results'),
            BoolArgument('--parallel', '-p', help='run tests in parallel'),
            BoolArgument('--exitfirst', '-x', help='exit on first failure'),
            BoolArgument('--verbose', '-v', help='Print all output')
        ]

        # group = parser.add_mutually_exclusive_group(required=True)
        mutually_exclusive_arguments = [
            [
                BoolArgument('--report-coverage', '-r', help='generate test coverage reports'),
                Argument('--markers', '-m', nargs=1, help='test markers to run')
            ]
        ]

    def run(self, _) -> None:
        args = self.parsed_args
        if args.report_coverage:
            report_coverage()
            exit()

        label = None if args.label is None else args.label[0]

        options = f" -m '{args.markers[0]}'"
        options += ' --color=yes'

        if args.parallel:
            options += ' -n auto'

        if args.verbose:
            options += ' -s'

        if args.exitfirst:
            options += ' --exitfirst'

        groups = None if args.groups is None else args.groups[0]
        group = None if args.group is None else args.group[0]
        if groups is not None and group is not None:
            if groups > 0:
                label = group if label is None else f"{label}.{group}"
                options += f" --test-group-count {groups} --test-group={group}"
        elif group is not None or groups is not None:
            print("--groups and --group are both required if one is used")
            exit(1)

        test(options, label)


if __name__ == '__main__':
    TestApp().main()

#!/usr/bin/env python

import os
import random
import string
import subprocess
import sys
from pathlib import Path
from subprocess import CompletedProcess
from typing import Optional


def run_command(cwd: Path, cmd: str) -> CompletedProcess:
    cmd_env = os.environ.copy()
    completed_process = subprocess.run(cmd, cwd=cwd, shell=True, env=cmd_env)
    return completed_process


def get_random_alphanumeric_string(length: int) -> str:
    letters_and_digits = string.ascii_letters + string.digits
    result_str = ''.join((random.choice(letters_and_digits) for _ in range(length)))
    print(f"Random alphanumeric String is: {result_str}")
    return result_str


command_arg: Optional[str] = None
if len(sys.argv) > 1:
    command_arg = sys.argv[1]

if len(sys.argv) > 2:
    name = f"-{sys.argv[2]}"
else:
    name = f"-{get_random_alphanumeric_string(12)}"

# Repo path
path = Path(__file__).resolve().parent.parent.resolve()

# Create build dir
build_dir = path / "build"
build_dir.mkdir(parents=True, exist_ok=True)
coverage_dir = build_dir / "coverage"
coverage_dir.mkdir(parents=True, exist_ok=True)

if command_arg == "report":
    # Coverage reports
    result = run_command(path, "coverage combine build/coverage/")
    assert result.returncode == 0
    result = run_command(path, "coverage report xml -o build/coverage/xml")
    assert result.returncode == 0
    result = run_command(path, "coverage report html --directory build/coverage/html")
    assert result.returncode == 0
    result = run_command(path, "coverage report json -o build/coverage/json")
    assert result.returncode == 0
    exit()

# Create temp dir
temp_dir = path / "temp"
temp_dir.mkdir(parents=True, exist_ok=True)

# Base command
command = f"pytest --basetemp={temp_dir} -vv"

# Coverage command
command += " --cov-config=.coveragerc --cov-append --cov=clowder"

# JUnit reports
junit_dir = build_dir / f"junit"
junit_dir.mkdir(parents=True, exist_ok=True)
junit_file = junit_dir / f"results{name}.xml"
command += f" --junitxml={junit_file}"

# BDD reports
cucumber_dir = build_dir / f"cucumber"
cucumber_dir.mkdir(parents=True, exist_ok=True)
cucumber_file = cucumber_dir / f"results{name}.json"
bdd_reporting_options = f" --cucumberjson={cucumber_file} --cucumberjson-expanded"
command += bdd_reporting_options

# Run command with script argument
if command_arg is not None:
    test_cmd = f'{command} {command_arg}'
    result = run_command(path, test_cmd)
    junit_file.rename(f"results{name}.xml")
    cucumber_file.rename(f"cucumber{name}.json")
    exit(result.returncode)

# Run parallel tests
test_cmd = f'{command} -n auto -m "not offline and not write"'
run_command(path, test_cmd)

# Run offline tests
test_cmd = f'{command} -m "offline and not config"'
run_command(path, test_cmd)

# Run write tests
test_cmd = f'{command} -m "write and not offline"'
run_command(path, test_cmd)

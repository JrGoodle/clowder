#!/usr/bin/env python

import os
import shutil
import subprocess
import sys
from pathlib import Path
from subprocess import CompletedProcess
from typing import Optional


def run_command(cwd: Path, cmd: str) -> CompletedProcess:
    cmd_env = os.environ.copy()
    completed_process = subprocess.run(cmd, cwd=cwd, shell=True, env=cmd_env)
    return completed_process


command_arg: Optional[str] = None
if len(sys.argv) > 1:
    command_arg = sys.argv[1]

name = ""
if len(sys.argv) > 2:
    name = f"-{sys.argv[2]}"

# Repo path
path = Path(__file__).resolve().parent.parent.resolve()

# Clean old test coverage results
run_command(path, "coverage erase")

# Create build dir
build_dir = path / "build"

# Base command
temp_dir = build_dir / "temp"
temp_dir.mkdir(parents=True, exist_ok=True)
command = f"pytest --basetemp={temp_dir} -vv"

# Coverage
command += " --cov-config=.coveragerc --cov-append --cov=clowder"

# Create reports dir
reports_dir = build_dir / "reports"
reports_dir.mkdir(parents=True, exist_ok=True)

# Coverage reports
coverage_dir = reports_dir / f"coverage{name}"
coverage_dir.mkdir(parents=True, exist_ok=True)
xml_file = coverage_dir / "results.xml"
command += f" --cov-report xml:{xml_file}"
html_dir = coverage_dir / "html"
command += f" --cov-report html:{html_dir}"
annotate_dir = coverage_dir / "annotate"
command += f" --cov-report annotate:{annotate_dir}"

# JUnit reports
junit_dir = reports_dir / f"junit{name}"
junit_dir.mkdir(parents=True, exist_ok=True)
junit_file = junit_dir / "results.xml"
command += f" --junitxml={junit_file}"

# BDD reports
cucumber_dir = reports_dir / f"cucumber{name}"
cucumber_dir.mkdir(parents=True, exist_ok=True)
cucumber_file = cucumber_dir / "results.json"
bdd_reporting_options = f" --cucumberjson={cucumber_file} --cucumberjson-expanded"
command += bdd_reporting_options

# Run command with script argument
if command_arg is not None:
    test_cmd = f'{command} {command_arg}'
    result = run_command(path, test_cmd)
    exit(result.returncode)

# Run tests
test_cmd = f'{command} -n auto -m "status and not config and not offline and not write"'
run_command(path, test_cmd)

# # parallel
# test_cmd = f'{base_command} -n auto -m "not config and not offline and not write"'
# run_command(path, test_cmd)
# # offline
# test_cmd = f'{base_command} -m "offline and not config"'
# run_command(path, test_cmd)
# # write
# test_cmd = f'{base_command} -m "write and not config"'
# run_command(path, test_cmd)
# # config
# test_cmd = f'{base_command} -m "config"'
# run_command(path, test_cmd)

# config_file = Path.home() / ".config/clowder/clowder.config.yml"
# config_file.unlink()

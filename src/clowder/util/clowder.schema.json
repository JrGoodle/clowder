{
  "title": "JSON schema for Clowder configuration files",
  "$id": "http://json.schemastore.org/clowder",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "nonEmptyString": {
      "type": "string",
      "minLength": 1
    },
    "nonEmptyStringNoSpaces": {
      "type": "string",
      "minLength": 1,
      "pattern": "^((?! ).)*$"
    },
    "relativePath": {
      "type": "string",
      "minLength": 1,
      "pattern": "^(?!\/.*$).*"
    },
    "gitSha1": {
      "type": "string",
      "pattern": "[a-fA-F0-9]{40}"
    },
    "gitDepth": {
      "type": "integer",
      "minimum": 0,
      "default": 0
    },
    "gitRecursive": {
      "type": "boolean",
      "default": false
    },
    "gitLfs": {
      "type": "boolean",
      "default": false
    },
    "gitProtocol": {
      "type": "string",
      "enum": [
        "https",
        "ssh"
      ]
    },
    "gitConfigVariableName": {
      "description": "Fully qualified git config variable name",
      "type": "string",
      "minLength": 1,
      "pattern": "^[a-zA-Z][a-zA-Z0-9-]*[.]([^\n]+[.]){0,1}[a-zA-Z][a-zA-Z0-9-]*$"
    },
    "gitConfigVariableValue": {
      "description": "Fully qualified git config variable name as key. Git config variable value.",
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyString"
        },
        {
          "type": "number"
        },
        {
          "type": "boolean"
        },
        {
          "type": "null"
        }
      ]
    },
    "clowderName": {
      "description": "A name describing the projects. Must be a string containing any combination of letters, numbers, - or _",
      "type": "string",
      "minLength": 1,
      "pattern": "[A-Za-z0-9_-]+"
    },
    "defaults": {
      "description": "Default values inherited by projects, sources, and forks",
      "type": "object",
      "anyOf": [
        {
          "minProperties": 1,
          "additionalProperties": false,
          "properties": {
            "source": {
              "$ref": "#/definitions/defaultSource"
            },
            "branch": {
              "$ref": "#/definitions/defaultBranch"
            },
            "remote": {
              "$ref": "#/definitions/defaultRemote"
            },
            "protocol": {
              "$ref": "#/definitions/defaultProtocol"
            },
            "git": {
              "$ref": "#/definitions/defaultGitSettings"
            }
          }
        },
        {
          "minProperties": 1,
          "additionalProperties": false,
          "properties": {
            "source": {
              "$ref": "#/definitions/defaultSource"
            },
            "tag": {
              "$ref": "#/definitions/defaultTag"
            },
            "remote": {
              "$ref": "#/definitions/defaultRemote"
            },
            "protocol": {
              "$ref": "#/definitions/defaultProtocol"
            },
            "git": {
              "$ref": "#/definitions/defaultGitSettings"
            }
          }
        },
        {
          "minProperties": 1,
          "additionalProperties": false,
          "properties": {
            "source": {
              "$ref": "#/definitions/defaultSource"
            },
            "commit": {
              "$ref": "#/definitions/defaultCommit"
            },
            "remote": {
              "$ref": "#/definitions/defaultRemote"
            },
            "protocol": {
              "$ref": "#/definitions/defaultProtocol"
            },
            "git": {
              "$ref": "#/definitions/defaultGitSettings"
            }
          }
        }
      ]
    },
    "defaultSource": {
      "description": "Default git hosting provider source name",
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyStringNoSpaces"
        }
      ]
    },
    "defaultProtocol": {
      "description": "Default git URL protocol for git hosting provider sources. Accepted values are 'ssh' or 'https'. If not supplied, defaults to 'ssh'. The full URL gets formed as:\ngit@${source_url}:${project_name/fork_name}.git\nhttps://${source_url}/${project_name/fork_name}.git",
      "oneOf": [
        {
          "$ref": "#/definitions/gitProtocol"
        }
      ]
    },
    "defaultBranch": {
      "description": "Default name of the git branch to track for projects and forks. If not supplied the default branch 'master' is used.",
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyStringNoSpaces"
        }
      ]
    },
    "defaultTag": {
      "description": "Default name of the git tag to track for projects and forks.",
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyStringNoSpaces"
        }
      ]
    },
    "defaultCommit": {
      "description": "Default git commit SHA-1 to track for this projects and forks. Must be full 40 character SHA-1.",
      "oneOf": [
        {
          "$ref": "#/definitions/gitSha1"
        }
      ]
    },
    "defaultRemote": {
      "description": "The name specified here is used as the default remote name in the project's .git/config, and is therefore automatically available to commands like git fetch, git remote, git pull and git push.",
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyStringNoSpaces"
        }
      ]
    },
    "defaultGitSettings": {
      "description": "Default git settings",
      "type": "object",
      "minProperties": 1,
      "additionalProperties": false,
      "properties": {
        "lfs": {
          "$ref": "#/definitions/defaultLfs"
        },
        "recursive": {
          "$ref": "#/definitions/defaultRecursive"
        },
        "depth": {
          "$ref": "#/definitions/defaultDepth"
        },
        "config": {
          "$ref": "#/definitions/defaultGitConfig"
        }
      }
    },
    "defaultGitConfig": {
      "description": "Default git config",
      "type": "object",
      "minProperties": 1,
      "propertyNames": {
        "$ref": "#/definitions/gitConfigVariableName"
      },
      "additionalProperties": {
        "$ref": "#/definitions/gitConfigVariableValue"
      }
    },
    "defaultDepth": {
      "description": "Default git clone depth",
      "oneOf": [
        {
          "$ref": "#/definitions/gitDepth"
        }
      ]
    },
    "defaultRecursive": {
      "description": "Default for whether to clone and fetch project and fork submodules recursively",
      "oneOf": [
        {
          "$ref": "#/definitions/gitRecursive"
        }
      ]
    },
    "defaultLfs": {
      "description": "Default for whether projects and forks should install git lfs hooks and update lfs files",
      "oneOf": [
        {
          "$ref": "#/definitions/gitLfs"
        }
      ]
    },
    "sources": {
      "description": "Git hosting provider sources",
      "type": "object",
      "minProperties": 1,
      "additionalProperties": {
        "$ref": "#/definitions/source"
      },
      "propertyNames": {
        "pattern": "[A-Za-z0-9_-]+"
      }
    },
    "source": {
      "description": "Name of git repository hosting provider source",
      "type": "object",
      "required": [
        "url"
      ],
      "additionalProperties": false,
      "properties": {
        "url": {
          "$ref": "#/definitions/sourceUrl"
        },
        "protocol": {
          "$ref": "#/definitions/sourceProtocol"
        }
      }
    },
    "sourceName": {
      "description": "Unique identifier for git hosting provider source",
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyStringNoSpaces"
        }
      ]
    },
    "sourceUrl": {
      "description": "The base URL of the git hosting provider. The full URL gets formed as:\ngit@${source_url}:${project_name/fork_name}.git\nhttps://${source_url}/${project_name/fork_name}.git",
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyStringNoSpaces"
        }
      ]
    },
    "sourceProtocol": {
      "description": "The git URL protocol for the git hosting provider source. Accepted values are 'ssh' or 'https'. If not supplied, defaults to 'ssh'. The full URL gets formed as:\ngit@${source_url}:${project_name/fork_name}.git\nhttps://${source_url}/${project_name/fork_name}.git",
      "oneOf": [
        {
          "$ref": "#/definitions/gitProtocol"
        }
      ]
    },
    "fork": {
      "description": "Git project fork",
      "type": "object",
      "anyOf": [
        {
          "additionalProperties": false,
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "$ref": "#/definitions/forkName"
            },
            "source": {
              "$ref": "#/definitions/forkSource"
            },
            "branch": {
              "$ref": "#/definitions/forkBranch"
            },
            "remote": {
              "$ref": "#/definitions/forkRemote"
            }
          }
        },
        {
          "additionalProperties": false,
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "$ref": "#/definitions/forkName"
            },
            "source": {
              "$ref": "#/definitions/forkSource"
            },
            "tag": {
              "$ref": "#/definitions/forkTag"
            },
            "remote": {
              "$ref": "#/definitions/forkRemote"
            }
          }
        },
        {
          "additionalProperties": false,
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "$ref": "#/definitions/forkName"
            },
            "source": {
              "$ref": "#/definitions/forkSource"
            },
            "commit": {
              "$ref": "#/definitions/forkCommit"
            },
            "remote": {
              "$ref": "#/definitions/forkRemote"
            }
          }
        }
      ]
    },
    "forkName": {
      "description": "A unique name for this fork. The fork's name is appended onto its source's URL to generate the full URL to configure the Git remote with. The full URL gets formed as:\ngit@${source_url}:${project_name/fork_name}.git\nhttps://${source_url}/${project_name/fork_name}.git",
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyStringNoSpaces"
        }
      ]
    },
    "forkSource": {
      "description": "Fork git hosting provider source name",
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyStringNoSpaces"
        }
      ]
    },
    "forkRemote": {
      "description": "The name specified here is used as the remote name in the fork's .git/config, and is therefore automatically available to commands like git fetch, git remote, git pull and git push.",
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyStringNoSpaces"
        }
      ]
    },
    "forkBranch": {
      "description": "Name of the git branch to track for this fork. If not supplied the ref specified in the defaults is used if applicable, else the default branch 'master' is used.",
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyStringNoSpaces"
        }
      ]
    },
    "forkCommit": {
      "description": "Git commit SHA-1 to track for this fork. Must be full 40 character SHA-1.",
      "oneOf": [
        {
          "$ref": "#/definitions/gitSha1"
        }
      ]
    },
    "forkTag": {
      "description": "Name of the git tag to track for this fork.",
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyStringNoSpaces"
        }
      ]
    },
    "projects": {
      "description": "List of git projects",
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/project"
      }
    },
    "project": {
      "description": "Git project",
      "type": "object",
      "anyOf": [
        {
          "additionalProperties": false,
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "$ref": "#/definitions/projectName"
            },
            "path": {
              "$ref": "#/definitions/projectPath"
            },
            "source": {
              "$ref": "#/definitions/projectSource"
            },
            "branch": {
              "$ref": "#/definitions/projectBranch"
            },
            "remote": {
              "$ref": "#/definitions/projectRemote"
            },
            "groups": {
              "$ref": "#/definitions/projectGroups"
            },
            "fork": {
              "$ref": "#/definitions/fork"
            },
            "git": {
              "$ref": "#/definitions/projectGitSettings"
            }
          }
        },
        {
          "additionalProperties": false,
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "$ref": "#/definitions/projectName"
            },
            "path": {
              "$ref": "#/definitions/projectPath"
            },
            "source": {
              "$ref": "#/definitions/projectSource"
            },
            "tag": {
              "$ref": "#/definitions/projectTag"
            },
            "remote": {
              "$ref": "#/definitions/projectRemote"
            },
            "groups": {
              "$ref": "#/definitions/projectGroups"
            },
            "fork": {
              "$ref": "#/definitions/fork"
            },
            "git": {
              "$ref": "#/definitions/projectGitSettings"
            }
          }
        },
        {
          "additionalProperties": false,
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "$ref": "#/definitions/projectName"
            },
            "path": {
              "$ref": "#/definitions/projectPath"
            },
            "source": {
              "$ref": "#/definitions/projectSource"
            },
            "commit": {
              "$ref": "#/definitions/projectCommit"
            },
            "remote": {
              "$ref": "#/definitions/projectRemote"
            },
            "groups": {
              "$ref": "#/definitions/projectGroups"
            },
            "fork": {
              "$ref": "#/definitions/fork"
            },
            "depth": {
              "$ref": "#/definitions/projectDepth"
            },
            "git": {
              "$ref": "#/definitions/projectGitSettings"
            }
          }
        }
      ]
    },
    "projectGroup": {
      "type": "string",
      "minLength": 1,
      "pattern": "^(?!default|all$)[a-zA-Z0-9-_]*$"
    },
    "projectGroups": {
      "description": "Groups project belongs to",
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/projectGroup"
      }
    },
    "projectPath": {
      "description": "Path to clone project on disk",
      "oneOf": [
        {
          "$ref": "#/definitions/relativePath"
        }
      ]
    },
    "projectGitConfig": {
      "description": "Project git config",
      "type": "object",
      "minProperties": 1,
      "propertyNames": {
        "$ref": "#/definitions/gitConfigVariableName"
      },
      "additionalProperties": {
        "$ref": "#/definitions/gitConfigVariableValue"
      }
    },
    "projectGitSettings": {
      "description": "Project git settings",
      "type": "object",
      "minProperties": 1,
      "additionalProperties": false,
      "properties": {
        "lfs": {
          "$ref": "#/definitions/projectLfs"
        },
        "recursive": {
          "$ref": "#/definitions/projectRecursive"
        },
        "depth": {
          "$ref": "#/definitions/projectDepth"
        },
        "config": {
          "$ref": "#/definitions/projectGitConfig"
        }
      }
    },
    "projectName": {
      "description": "A unique name for this project.\nThe project's name is appended onto its source's URL to generate the full URL to configure the Git remote with. The full URL gets formed as:\ngit@${source_url}:${project_name/fork_name}.git\nhttps://${source_url}/${project_name/fork_name}.git",
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyStringNoSpaces"
        }
      ]
    },
    "projectSource": {
      "description": "Project git hosting provider source name",
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyStringNoSpaces"
        }
      ]
    },
    "projectRemote": {
      "description": "The name specified here is used as the remote name in the project .git/config, and is therefore automatically available to commands like git fetch, git remote, git pull and git push.",
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyStringNoSpaces"
        }
      ]
    },
    "projectDepth": {
      "description": "Project git clone depth",
      "oneOf": [
        {
          "$ref": "#/definitions/gitDepth"
        }
      ]
    },
    "projectRecursive": {
      "description": "Whether to clone and fetch project and fork submodules recursively",
      "oneOf": [
        {
          "$ref": "#/definitions/gitRecursive"
        }
      ]
    },
    "projectLfs": {
      "description": "Whether project and fork should install git lfs hooks and update lfs files",
      "oneOf": [
        {
          "$ref": "#/definitions/gitLfs"
        }
      ]
    },
    "projectBranch": {
      "description": "Name of the git branch to track for this project. If not supplied the ref specified in the defaults is used if applicable, else the default branch 'master' is used.",
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyStringNoSpaces"
        }
      ]
    },
    "projectTag": {
      "description": "Name of the git tag to track for this project.",
      "oneOf": [
        {
          "$ref": "#/definitions/nonEmptyStringNoSpaces"
        }
      ]
    },
    "projectCommit": {
      "description": "Git commit SHA-1 to track for this project. Must be full 40 character SHA-1.",
      "oneOf": [
        {
          "$ref": "#/definitions/gitSha1"
        }
      ]
    },
    "namedProjectsSection": {
      "description": "Named projects section",
      "type": "object",
      "required": [
        "projects"
      ],
      "additionalProperties": false,
      "properties": {
        "path": {
          "$ref": "#/definitions/sectionPath"
        },
        "projects": {
          "$ref": "#/definitions/projects"
        }
      }
    },
    "sectionPath": {
      "description": "Prefix path for projects",
      "oneOf": [
        {
          "$ref": "#/definitions/relativePath"
        }
      ]
    },
    "basicClowder": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "name",
        "projects"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/clowderName"
        },
        "defaults": {
          "$ref": "#/definitions/defaults"
        },
        "sources": {
          "$ref": "#/definitions/sources"
        },
        "projects": {
          "$ref": "#/definitions/projects"
        }
      }
    },
    "sectionedClowder": {
      "type": "object",
      "minProperties": 2,
      "additionalProperties": {
        "$ref": "#/definitions/namedProjectsSection"
      },
      "propertyNames": {
        "pattern": "^(?!defaults|sources$)[A-Za-z0-9_-]+"
      },
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/clowderName"
        },
        "projects": {
          "$ref": "#/definitions/projects"
        }
      }
    },
    "sectionedClowderDefaults": {
      "type": "object",
      "minProperties": 3,
      "additionalProperties": {
        "$ref": "#/definitions/namedProjectsSection"
      },
      "propertyNames": {
        "pattern": "^(?!sources$)[A-Za-z0-9_-]+"
      },
      "required": [
        "name",
        "defaults"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/clowderName"
        },
        "projects": {
          "$ref": "#/definitions/projects"
        },
        "defaults": {
          "$ref": "#/definitions/defaults"
        }
      }
    },
    "sectionedClowderSources": {
      "type": "object",
      "minProperties": 3,
      "additionalProperties": {
        "$ref": "#/definitions/namedProjectsSection"
      },
      "propertyNames": {
        "pattern": "^(?!defaults$)[A-Za-z0-9_-]+"
      },
      "required": [
        "name",
        "sources"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/clowderName"
        },
        "projects": {
          "$ref": "#/definitions/projects"
        },
        "sources": {
          "$ref": "#/definitions/sources"
        }
      }
    },
    "sectionedClowderDefaultsSources": {
      "type": "object",
      "minProperties": 4,
      "additionalProperties": {
        "$ref": "#/definitions/namedProjectsSection"
      },
      "propertyNames": {
        "pattern": "[A-Za-z0-9_-]+"
      },
      "required": [
        "name",
        "defaults",
        "sources"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/clowderName"
        },
        "projects": {
          "$ref": "#/definitions/projects"
        },
        "defaults": {
          "$ref": "#/definitions/defaults"
        },
        "sources": {
          "$ref": "#/definitions/sources"
        }
      }
    }
  },
  "oneOf": [
    {
      "$ref": "#/definitions/basicClowder"
    }
  ]
}
